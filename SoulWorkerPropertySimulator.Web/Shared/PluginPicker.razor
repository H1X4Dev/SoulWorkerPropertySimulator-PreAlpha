@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Models.Plugins
@implements IDisposable
@inject IDataProvideService Data
@inject IEquipmentComputeService EquipmentCompute

<div class="w-50 pt-3 pe-2">
    <div class="card">
        @if (Options.Any())
        {
            <div class="card-header d-flex align-items-center">
                <div>Options</div>
                <div class="flex-grow-1 ms-2">
                    <select class="form-select" @bind="Selected">
                        <option></option>
                        @foreach (var item in Options)
                        {
                            <option value="@item.GetHashCode()" disabled="@(item.Level > Level)">@item.Name</option>
                        }
                    </select>
                </div>
            </div>
            @if (SelectedBlueprint != null)
            {
                <div>
                    @if (SelectedBlueprint.ValidStep?.Count > 1)
                    {
                        <div class="input-group mb-3">
                            <span class="input-group-text">Grade</span>
                            <select class="form-control" @bind="SelectedStep">
                                @foreach (var i in SelectedBlueprint.ValidStep)
                                {
                                    <option value="@i">@i</option>
                                }
                            </select>
                        </div>
                    }

                    @if (SelectedBlueprint.RandomAmount > 0)
                    {
                        <EffectsCreator @ref="_effectsCreator" NotifyUpdate="NotifyUpdate" Blueprint="SelectedBlueprint" DefaultEffects="DefaultPlugin?.SelectedEffect"/>
                    }
                </div>
            }
        }
    </div>
</div>

@code
{
    private PluginsCreator? _parents;

    [CascadingParameter(Name = nameof(Parents))]
    public PluginsCreator? Parents
    {
        get => _parents;
        set
        {
            _parents?.Pickers.Remove(this);
            _parents = value;
            value?.Pickers.Add(this);
        }
    }

    [CascadingParameter(Name = nameof(Level))]
    public int Level { get; set; }

    [CascadingParameter(Name = nameof(Options))]
    public IReadOnlyCollection<PluginBlueprint> Options { get; set; } = null!;

    [Parameter]
    public EventCallback NotifyUpdate { get; set; }

    [Parameter]
    public Plugin? DefaultPlugin { get; set; }

    private int? _selected;

    public PluginBlueprint? SelectedBlueprint
    {
        set => Selected = value?.GetHashCode();
        get => Options.FirstOrDefault(x => x.GetHashCode() == _selected);
    }

    private int? Selected
    {
        get => _selected;
        set
        {
            if (_selected == value) { return; }
            _selected = value;
            if (SelectedBlueprint == null || SelectedBlueprint.RandomAmount == 0 || SelectedBlueprint.RandomEffects.Count > SelectedBlueprint.RandomAmount) { NotifyUpdate.InvokeAsync(); }
        }
    }

    private int? _selectedStep;

    public int? SelectedStep
    {
        get => _selectedStep;
        set
        {
            _selectedStep = value;
            NotifyUpdate.InvokeAsync();
        }
    }

    private EffectsCreator? _effectsCreator;

    public Plugin? Item
    {
        get
        {
            try { return SelectedBlueprint?.Create(_effectsCreator?.Effects); }
            catch (InvalidOperationException) {
                return null;
            }
        }
    }

    // private bool _processDefault = false;

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
    // _processDefault = DefaultPlugin != null;

        if (DefaultPlugin != null)
        {
            _selected = DefaultPlugin.Blueprint.GetHashCode();
            _selectedStep = DefaultPlugin.Step;
        }
    }

    // protected override void OnParametersSet()
    // {
    //     base.OnParametersSet();
    //     if (_processDefault && DefaultPlugin != null)
    //     {
    //         _selected = DefaultPlugin.EquipmentBlueprint.GetHashCode();
    //         _selectedStep = DefaultPlugin.Step;
    //         _processDefault = false;
    //     }
    // }

    public void Dispose() => Parents?.Pickers.Remove(this);
}