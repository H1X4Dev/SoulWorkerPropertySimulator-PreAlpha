@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using SoulWorkerPropertySimulator.Extensions
@using SoulWorkerPropertySimulator.Models.Effects
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Types
@using SoulWorkerPropertySimulator.Web.Pages
@inject IWebAssemblyHostEnvironment HostEnvironment
@inject IPanelComputeService PanelCompute
<div class="top-row ps-4 navbar navbar-dark">
    <a class="navbar-brand" href="">SoulWolker Calculator</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="character">
                <span class="oi oi-list-rich" aria-hidden="true"></span> @CharacterSetting.Title
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="brooches">
                <span class="oi oi-list-rich" aria-hidden="true"></span> @BroochesSetting.Title
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="equipment">
                <span class="oi oi-list-rich" aria-hidden="true"></span> @EquipmentSetting.Title
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="accessory">
                <span class="oi oi-list-rich" aria-hidden="true"></span> @AccessorySetting.Title
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="detail">
                <span class="oi oi-list-rich" aria-hidden="true"></span> @Detail.Title
            </NavLink>
        </li>
    </ul>
</div>
<div class="position-absolute bottom-0 w-100">
    <ul class="list-group list-group-flush">
        @if (HostEnvironment.IsDevelopment())
        {
            @foreach (var (context, value) in _effects.Where(x => x.Value != 0))
            {
                <li class="list-group-item d-flex">
                    <div class="flex-grow-1">@context.Description</div>
                    <div>@(context.Property.IsPercent() ? $"{value * 100}%" : (int) value)</div>
                </li>
            }
        }
        else
        {
            @foreach (var (context, value) in _effects.Where(x => x.Key.IsStatic && _mainPanel.Contains(x.Key.Property) && x.Value != 0))
            {
                <li class="list-group-item d-flex">
                    <div class="flex-grow-1">@context.Description</div>
                    <div>@(context.Property.IsPercent() ? $"{value * 100}%" : (int) value)</div>
                </li>
            }
        }
    </ul>
</div>

@code {
    private bool _collapseNavMenu = true;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu() => _collapseNavMenu = !_collapseNavMenu;

    private IDictionary<EffectContext, decimal> _effects = null!;

    public void Update(EffectContext context, decimal value)
    {
        if (!_effects.ContainsKey(context)) { _effects.Add(context, value); }
        else
        { _effects[context] = value; }
        StateHasChanged();
    }

    protected override Task OnInitializedAsync()
    {
        base.OnInitializedAsync();

        _effects = PanelCompute.GetStatic().ToDictionary(x => x.Context, x => x.Value);
        PanelCompute.OnStaticChange += Update;

        return Task.CompletedTask;
    }

    private static Property[] _mainPanel = {Property.Attack, Property.CriticalRate, Property.CriticalDamage, Property.Accuracy, Property.DefenseBreakRate, Property.ExtraDamageRateBoss, Property.AttackSpeedRate, Property.PartialDamageRate};
}