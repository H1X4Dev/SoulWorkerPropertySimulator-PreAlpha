@using SoulWorkerPropertySimulator.Extensions
@using SoulWorkerPropertySimulator.Models
@using SoulWorkerPropertySimulator.Models.Equipments
@using SoulWorkerPropertySimulator.Models.Plugins
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Types
@inject IDataProvideService Data
@inject IEquipmentComputeService EquipmentCompute

@if (Options.Any())
{
    <div class="card mb-3">
        <div class="card-header d-flex align-items-center">
            <div>@Field.GetDescription()</div>
            <div class="flex-grow-1 ms-2">
                <select class="form-select" @bind="Selected">
                    <option></option>
                    @foreach (var item in Options)
                    {
                        <option value="@item.GetHashCode()">@item.FullName</option>
                    }
                </select>
            </div>
            @if (SelectedBlueprint != null)
            {
                <div class="ms-4 me-2">+</div>
                <div>
                    <select class="form-select" disabled="@(SelectedBlueprint == null || SelectedBlueprint.ValidStep?.Count <= 1)" @bind="SelectedStep">
                        @if (!(SelectedBlueprint!.ValidStep?.Any() ?? false))
                        {
                            <option value="0">0</option>
                        }
                        else
                        {
                            @foreach (var i in SelectedBlueprint.ValidStep)
                            {
                                <option value="@i">@i</option>
                            }
                        }
                    </select>
                </div>
            }
        </div>
        @if (SelectedBlueprint != null)
        {
            <div class="d-flex">
                <div class="w-50">
                    <EffectsCreator @ref="_effectsCreator" NotifyUpdate="Update" Blueprint="SelectedBlueprint" DefaultEffects="DefaultArmor?.SelectedEffect"/>
                </div>
                <div class="w-50 mt-3 mb-3 pe-3">
                    <div class="d-flex">
                        <div class="input-group w-50 pe-2">
                            <span class="input-group-text">Quality</span>
                            <input class="form-control" type="number" min="0" max="100" disabled="@(SelectedBlueprint == null)" @bind="SelectedQuality"/>
                            <span class="input-group-text">%</span>
                        </div>
                        <div class="d-flex w-50 pe1">
                            <div class="flex-grow-1">
                                <select class="form-select" @bind="SelectedTagHash">
                                    <option value="">無標籤</option>
                                    @foreach (var tag in TagOptions)
                                    {
                                        <option value="@tag.GetHashCode()">@tag.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="mx-2">
                                @if (SelectedTag != null)
                                {
                                    <select class="form-select" @bind="SelectedTagRare">
                                        @if (SelectedTag != null)
                                        {
                                            @foreach (var rare in SelectedTag.ValidRare)
                                            {
                                                <option value="@rare">@rare.GetDescription()</option>
                                            }
                                        }
                                    </select>
                                }
                            </div>
                        </div>
                    </div>

                    @if (SelectedBlueprint!.PluginLimit > 0)
                    {
                        <PluginsCreator @ref="_pluginsCreator"
                                         EquipmentBlueprint="SelectedBlueprint"
                                         DefaultPlugins="DefaultArmor?.Plugins"/>
                    }
                </div>
            </div>
        }
    </div>
}

@code
{
    [Parameter]
    public EquipmentField Field { get; set; }

    [Parameter]
    public Equipment? DefaultArmor { get; set; }

    private IReadOnlyCollection<EquipmentBlueprint> Options { get; set; } = null!;

    private IReadOnlyCollection<Tag> TagOptions { get; set; } = null!;

    private PluginField PluginField { get; set; }

    private int? _selected;

    public EquipmentBlueprint? SelectedBlueprint
    {
        set => Selected = value?.GetHashCode();
        get => Options.FirstOrDefault(x => x.GetHashCode() == _selected);
    }

    private int? Selected
    {
        get => _selected;
        set
        {
            if (_selected == value) { return; }
            _selected = value;
            _selectedQuality = 1;
            _selectedStep = SelectedBlueprint?.ValidStep?.Max() ?? 0;
            Update();
        }
    }

    private decimal _selectedQuality;

    public int SelectedQuality
    {
        get => (int) (_selectedQuality * 100);
        set
        {
            _selectedQuality = value / 100m;
            if (_notInitializePhase) { Update(); }
        }
    }

    private int? _selectedStep;

    public int? SelectedStep
    {
        get => _selectedStep;
        set
        {
            _selectedStep = value;
            if (_notInitializePhase) { Update(); }
        }
    }

    private int? _selectedTag;

    private Tag? SelectedTag
    {
        set => _selectedTag = value?.GetHashCode();
        get => _selectedTag == null ? null : TagOptions.FirstOrDefault(x => x.GetHashCode() == _selectedTag);
    }

    private int? SelectedTagHash
    {
        get => _selectedTag;
        set
        {
            if (_selectedTag == value) { return; }
            _selectedTag = value;
            SelectedTagRare = SelectedTag?.ValidRare.Max();
        }
    }

    private ItemRare? _selectedTagRare;

    private ItemRare? SelectedTagRare
    {
        get => _selectedTagRare;
        set
        {
            _selectedTagRare = value;
            EquipmentCompute.Change(Field, Tag);
        }
    }

    public Tag? Tag
    {
        get
        {
            var tag = SelectedTag;
            if (tag == null || SelectedTagRare == null) { return null; }
            return tag with { Rare = SelectedTagRare.Value };
        }
    }

    private EffectsCreator? _effectsCreator;
    private PluginsCreator? _pluginsCreator;

    private Equipment? Item
    {
        get
        {
            try
            {
                if (_effectsCreator == null) { return null; }

                var item = SelectedBlueprint?.Create(_effectsCreator.Effects);
                if (item == null) { return null; }
                return item with
                {
                    Ratio = _selectedQuality,
                    Plugins = _pluginsCreator?.Plugins ?? Array.Empty<Plugin>(),
                    Tag = Tag,
                    Step = SelectedStep
                    };
            }
            catch (InvalidOperationException) {
                return null;
            }
        }
    }

    private void Update()
    {
        var item = Item;
        if (item == null) { EquipmentCompute.Clear(Field); }
        else
        { EquipmentCompute.Change(item); }
    }

    private bool _notInitializePhase;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender) { _notInitializePhase = true; }
    }

    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
        Options = Data.GetEquipmentBlueprints(Field).ToList();
        TagOptions = Data.GetTags(Field == EquipmentField.Weapon ? TagField.Weapon : TagField.Gear);
        PluginField = Field == EquipmentField.Weapon ? PluginField.Weapon : PluginField.Gear;

        if (DefaultArmor != null)
        {
            _selected = DefaultArmor.Blueprint.GetHashCode();
            _selectedQuality = DefaultArmor.Ratio;
            _selectedStep = DefaultArmor.Step;
            _selectedTag = DefaultArmor.Tag == null ? null : (DefaultArmor.Tag with { Rare = ItemRare.Heroic }).GetHashCode();
            _selectedTagRare = DefaultArmor.Tag?.Rare;
        }
    }
}