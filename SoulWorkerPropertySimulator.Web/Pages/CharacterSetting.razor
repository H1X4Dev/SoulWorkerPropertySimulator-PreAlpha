@page "/character"
@using SoulWorkerPropertySimulator.Web.Services
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Types
@using SoulWorkerPropertySimulator.Models
@inject IPageInfoService InfoService
@inject IDataProvideService Data
@inject ICharacterComputeService CharacterCompute

<div>
    <div class="input-group mb-3">
        <label class="input-group-text">Character</label>
        <select class="form-select" @bind="SelectedCharacterName">
            @foreach (var character in Characters)
            {
                <option value="@character.Name">@character.Name</option>
            }
        </select>
        <label class="input-group-text">Level</label>
        <select class="form-select w-25 flex-grow-0" @bind="Level">
            @foreach (var level in SelectedCharter.ValidStep.OrderByDescending(x => x))
            {
                <option value="@level">@level</option>
            }
        </select>
    </div>
    <div class="d-flex">
        <TitlePicker @ref="_firstPicker" Field="TitleField.First" DefaultTitle="Default?.First"></TitlePicker>
        <span class="m-2"></span>
        <TitlePicker @ref="_lastPicker" Field="TitleField.Last" DefaultTitle="Default?.Last"></TitlePicker>
    </div>
</div>

@code {

        public const string Title = "Class/Title/AR";

    private IReadOnlyCollection<Character> Characters { get; set; } = null!;

    private Character? Default { get; set; }

    private string _selectedCharacter = null!;

    public string SelectedCharacterName
    {
        get => _selectedCharacter;
        set
        {
            _selectedCharacter = value;
            Level = SelectedCharter.ValidStep.Max();
        }
    }

    private Character SelectedCharter => Characters.First(x => x.Name.Equals(SelectedCharacterName));

    private int _level;

    private int Level
    {
        get => _level;
        set
        {
            _level = value;
            Update();
        }
    }

    public Character Item => SelectedCharter with { Step = Level, First = _firstPicker?.Item, Last = _lastPicker?.Item };

    private TitlePicker? _firstPicker;
    private TitlePicker? _lastPicker;

    private void Update() => CharacterCompute.Change(Item);

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InfoService.SetTitle(nameof(Detail), Title);

        Characters = Data.GetCharacters();

        Default = CharacterCompute.Get();
        if (Default == null) { SelectedCharacterName = Characters.First().Name; }
        else
        {
            _selectedCharacter = Default.Name;
            _level = Default.Step;
        }
    }

    public void Dispose() => InfoService.SetTitle(nameof(Detail), null);
}