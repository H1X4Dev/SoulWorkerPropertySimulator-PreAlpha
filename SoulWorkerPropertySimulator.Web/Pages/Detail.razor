@page "/detail"
@inject IPanelComputeService PanelCompute
@inject IPageInfoService InfoService
@using SoulWorkerPropertySimulator.Extensions
@using SoulWorkerPropertySimulator.Models.Effects
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Web.Services
@implements IDisposable

<div>
    <ul class="list-group">
        @foreach (var (context, value) in Static)
        {
            <li class="list-group-item d-flex">
                <div class="flex-grow-1">@context.Description</div>
                <div>@(context.Property.IsPercent() ? $"{value * 100}%" : (int) value)</div>
            </li>
        }
        @foreach (var (effect, value) in NonStatic)
        {
            @for (var i = 0; i < value; i++)
            {
                <li class="list-group-item d-flex">
                    <div class="flex-grow-1">@effect.Context.Description</div>
                    <div>@effect.Value</div>
                </li>
            }
        }
    </ul>
</div>


@code {
    private IReadOnlyCollection<Effect> Static { get; set; } = null!;
    private IReadOnlyDictionary<Effect, int> NonStatic { get; set; } = null!;

        public const string Title = "Details";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InfoService.SetTitle(nameof(Detail), Title);
        Static = PanelCompute.GetStatic();
        NonStatic = PanelCompute.GetNonStatic();
    }

    public void Dispose() => InfoService.SetTitle(nameof(Detail), null);
}