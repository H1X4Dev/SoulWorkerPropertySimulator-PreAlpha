@page "/brooches"
@inject IPageInfoService InfoService
@inject IBroochesSetComputeService BroochesSetCompute
@using SoulWorkerPropertySimulator.Extensions
@using SoulWorkerPropertySimulator.Models.Brooches
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Types
@using SoulWorkerPropertySimulator.Web.Services
@implements IDisposable

<div class="d-flex flex-wrap">
    @foreach (var field in Enum.GetValues<BroochesField>())
    {
        <div class="card text-center mb-2 me-2" style="min-width: 256pt">
            <div class="card-header">
                @field.GetDescription()
            </div>
            <div class="card-body">
                <CascadingValue Value="field" Name="Field">
                    @foreach (var type in Enum.GetValues<BroochesType>())
                    {
                        <BroochesPicker Type="type"/>
                    }
                </CascadingValue>
            </div>
            <div class="card-footer text-muted">
                @if (_set.ContainsKey(field) && _set[field] != null)
                {
                    <div>@(_set[field]!.Name)(@_set[field]!.Rare.GetDescription())</div>
                }
                else
                { <div>No brooches selected</div> }
            </div>
        </div>
    }
</div>

@code {
        public const string Title = "Brooches";

    private readonly Dictionary<BroochesField, BroochSet?> _set = new();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        InfoService.SetTitle(nameof(Detail), Title);
        BroochesSetCompute.OnSetChange += SetChange;
        foreach (var field in Enum.GetValues<BroochesField>()) { _set[field] = null; }
    }

    public void SetChange(IReadOnlyCollection<BroochSet> sets)
    {
        var hasChange = false;
        foreach (var field in Enum.GetValues<BroochesField>())
        {
            if (_set.ContainsKey(field) && _set[field] == sets.FirstOrDefault(x => x.Field == field)) { continue; }

            _set[field] = sets.FirstOrDefault(x => x.Field == field);
            hasChange = true;
        }

        if (hasChange) { StateHasChanged(); }
    }

    public void Dispose()
    {
        InfoService.SetTitle(nameof(Detail), null);
        BroochesSetCompute.OnSetChange -= SetChange;
    }

}