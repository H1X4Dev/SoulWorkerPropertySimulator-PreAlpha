@page "/accessory"
@inject IAccessorySetComputeService AccessorySetCompute
@inject IPageInfoService InfoService
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Types
@using SoulWorkerPropertySimulator.Web.Services
@using SoulWorkerPropertySimulator.Models.Accessory
@using System.Text
@implements IDisposable

<div>
    <CascadingValue Name="Parents" Value="this" IsFixed="true">
        @foreach (var (field, count) in _fields)
        {
            if (count == 1)
            {
                <AccessoryPicker NotifyUpdate="Update" Field="field" DefaultAccessory="Default.FirstOrDefault(x => x.Field == field)"/>
            }
            else
            {
                var d = Default.Where(x => x.Field == field).ToList();
                for (var i = 0; i < count; i++)
                {
                    if (d.Count > i)
                    {
                        <AccessoryPicker NotifyUpdate="Update" Field="field" DefaultAccessory="d[i]"/>
                    }
                    else
                    {
                        <AccessoryPicker NotifyUpdate="Update" Field="field"/>
                    }
                }
            }
        }
    </CascadingValue>
</div>

@code {

        private const string First = @"<ul class=""list-group list-group-horizontal list-group-flush justify-content-evenly""><li class=""list-group list-group-horizontal"">";
        private const string Last = "</li></ul>";

    private readonly IReadOnlyDictionary<AccessoryField, int> _fields = new Dictionary<AccessoryField, int> {{AccessoryField.Amulet, 1}, {AccessoryField.Earrings, 1}, {AccessoryField.Ring, 2}};

        public const string Title = "Accessories";

    private ICollection<Accessory> Default { get; set; } = null!;

    public ICollection<AccessoryPicker> Pickers { get; } = new List<AccessoryPicker>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        AccessorySetCompute.OnSetChange += SetBottom;
        Default = AccessorySetCompute.Get().ToList();
        InfoService.SetTitle(nameof(AccessorySetting), Title);
        InfoService.SetBottom(nameof(AccessorySetting), GetSetDescription(AccessorySetCompute.GetSets().ToList()));
    }

    public void SetBottom(IReadOnlyCollection<AccessorySet> sets) => InfoService.SetBottom(nameof(AccessorySetting), GetSetDescription(sets.OrderBy(x => x.Name).ToList()));

    public void Update(AccessoryField field)
    {
        var accessories = Pickers.Select(x => x.Item).Where(x => x != null && x.Field == field).ToList();
        if (!accessories.Any()) { AccessorySetCompute.Clear(field); }
        else
        { AccessorySetCompute.Change(accessories!); }
    }

    public void Dispose()
    {
        InfoService.SetTitle(nameof(AccessorySetting), null);
        InfoService.SetBottom(nameof(AccessorySetting), null);
        AccessorySetCompute.OnSetChange -= SetBottom;
    }

    private static string? GetSetDescription(IReadOnlyCollection<AccessorySet> sets)
    {
        if (!sets.Any()) { return string.Empty; }
        var builder = new StringBuilder();
        builder.Append(First);
        foreach (var set in sets) { builder.Append($"{set.Name}: {set.Step} piece effect"); }
        builder.Append(Last);
        return builder.ToString();
    }

}