@page "/equipment"
@inject IEquipmentComputeService EquipmentCompute
@inject IPageInfoService InfoService
@using SoulWorkerPropertySimulator.Services
@using SoulWorkerPropertySimulator.Types
@using SoulWorkerPropertySimulator.Web.Services
@using SoulWorkerPropertySimulator.Models.Equipments
@using System.Text
@implements IDisposable

<div>
    @foreach (var field in _fields)
    {
        <EquipmentPicker Field="field" DefaultArmor="Default.FirstOrDefault(x => x.Field == field)"/>
    }
</div>

@code {

        private const string First = @"<ul class=""list-group list-group-horizontal list-group-flush justify-content-evenly""><li class=""list-group list-group-horizontal"">";
        private const string Last = "</li></ul>";

    private readonly IReadOnlyCollection<EquipmentField> _fields = new[] {EquipmentField.Weapon, EquipmentField.Head, EquipmentField.Shoulder, EquipmentField.Chest, EquipmentField.Leg};

        public const string Title = "Weapons & Armor";

    private ICollection<Equipment> Default { get; set; } = null!;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        EquipmentCompute.OnSetChange += Bottom;
        Default = EquipmentCompute.Get().ToList();
        InfoService.SetTitle(nameof(EquipmentSetting), Title);
        InfoService.SetBottom(nameof(EquipmentSetting), GetSetDescription(EquipmentCompute.GetSets().ToList()));
    }

    public void Bottom(IReadOnlyCollection<EquipmentSet> sets) => InfoService.SetBottom(nameof(EquipmentSetting), GetSetDescription(sets.OrderBy(x => x.Name).ToList()));

    public void Dispose()
    {
        InfoService.SetTitle(nameof(EquipmentSetting), null);
        InfoService.SetBottom(nameof(EquipmentSetting), null);
        EquipmentCompute.OnSetChange -= Bottom;
    }

    private static string GetSetDescription(IReadOnlyCollection<EquipmentSet> sets)
    {
        if (!sets.Any()) { return string.Empty; }
        var builder = new StringBuilder();
        builder.Append(First);
        foreach (var set in sets) { builder.Append($"{set.Name}: {set.Step} piece effect"); }
        builder.Append(Last);
        return builder.ToString();
    }

}